
@inproceedings{chin_analyzing_2011,
	address = {New York, {NY}, {USA}},
	series = {{MobiSys} '11},
	title = {Analyzing Inter-application Communication in Android},
	isbn = {978-1-4503-0643-0},
	url = {http://doi.acm.org/10.1145/1999995.2000018},
	doi = {10.1145/1999995.2000018},
	abstract = {Modern smartphone operating systems support the development of third-party applications with open system {APIs}. In addition to an open {API}, the Android operating system also provides a rich inter-application message passing system. This encourages inter-application collaboration and reduces developer burden by facilitating component reuse. Unfortunately, message passing is also an application attack surface. The content of messages can be sniffed, modified, stolen, or replaced, which can compromise user privacy. Also, a malicious application can inject forged or otherwise malicious messages, which can lead to breaches of user data and violate application security policies. We examine Android application interaction and identify security risks in application components. We provide a tool, {ComDroid}, that detects application communication vulnerabilities. {ComDroid} can be used by developers to analyze their own applications before release, by application reviewers to analyze applications in the Android Market, and by end users. We analyzed 20 applications with the help of {ComDroid} and found 34 exploitable vulnerabilities; 12 of the 20 applications have at least one vulnerability.},
	urldate = {2014-11-24},
	booktitle = {Proceedings of the 9th International Conference on Mobile Systems, Applications, and Services},
	publisher = {{ACM}},
	author = {Chin, Erika and Felt, Adrienne Porter and Greenwood, Kate and Wagner, David},
	year = {2011},
	keywords = {Android, intents, message passing, mobile phone security},
	pages = {239--252},
	file = {ACM Full Text PDF:/home/kevin/.zotero/zotero/shcd70xr.default/zotero/storage/EM3JTT5I/Chin et al. - 2011 - Analyzing Inter-application Communication in Andro.pdf:application/pdf}
}

@misc{center_for_history_and_new_media_zotero_????,
	title = {Zotero Quick Start Guide},
	url = {http://zotero.org/support/quick_start_guide},
	author = {{Center for History and New Media}}
}

@misc{_android_????,
	title = {Android loses some {US} market share but remains top dog},
	url = {http://www.cnet.com/news/android-loses-some-us-market-share-but-remains-top-dog/},
	abstract = {Google's mobile {OS} remains firmly in first place in the {US} with a 51.5 percent market share, says {ComScore}, while Apple's {iOS} trails with 42.4 percent.},
	urldate = {2014-11-24},
	journal = {{CNET}},
	file = {Snapshot:/home/kevin/.zotero/zotero/shcd70xr.default/zotero/storage/5GDI4ZUX/android-loses-some-us-market-share-but-remains-top-dog.html:text/html}
}

@article{lam_soot_????,
	title = {The Soot framework for Java program analysis: a retrospective},
	shorttitle = {The Soot framework for Java program analysis},
	url = {http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.221.5311},
	abstract = {{CiteSeerX} - Document Details (Isaac Councill, Lee Giles, Pradeep Teregowda): Abstract—Soot is a successful framework for experimenting with compiler and software engineering techniques for Java programs. Researchers from around the world have implemented a wide range of research tools which build on Soot, and Soot has been widely used by students for both courses and thesis research. In this paper, we describe relevant features of Soot, summarize its development process, and discuss useful features for future program analysis frameworks. I.},
	urldate = {2014-11-24},
	author = {Lam, Patrick and Bodden, Eric and Hendren, Laurie and Darmstadt, Technische Universität},
	file = {Snapshot:/home/kevin/.zotero/zotero/shcd70xr.default/zotero/storage/MPCM52B6/summary.html:text/html}
}

@inproceedings{manadhata_measuring_2006,
	address = {New York, {NY}, {USA}},
	series = {{QoP} '06},
	title = {Measuring the Attack Surfaces of Two {FTP} Daemons},
	isbn = {1-59593-553-3},
	url = {http://doi.acm.org/10.1145/1179494.1179497},
	doi = {10.1145/1179494.1179497},
	abstract = {Software consumers often need to choose between different software that provide the same functionality. Today, security is a quality that many consumers, especially system administrators, care about and will use in choosing one soft- ware system over another. An attack surface metric is a security metric for comparing the relative security of similar software systems [7]. The measure of a system's attack surface is an indicator of the system's security: given two systems, we compare their attack surface measurements to decide whether one is more secure than another along each of the following three dimensions: methods, channels, and data. In this paper, we use the attack surface metric to measure the attack surfaces of two open source {FTP} daemons: {ProFTPD} 1.2.10 and Wu-{FTPD} 2.6.2. Our measurements show that {ProFTPD} is more secure along the method dimension, {ProFTPD} is as secure as Wu-{FTPD} along the channel dimension, and Wu-{FTPD} is more secure along the data dimension. We also demonstrate how software consumers can use the attack surface metric in making a choice between the two {FTP} daemons.},
	urldate = {2014-11-24},
	booktitle = {Proceedings of the 2Nd {ACM} Workshop on Quality of Protection},
	publisher = {{ACM}},
	author = {Manadhata, Pratyusa and Wing, Jeannette and Flynn, Mark and McQueen, Miles},
	year = {2006},
	keywords = {attack surface, attack surface metric, security metric},
	pages = {3--10},
	file = {ACM Full Text PDF:/home/kevin/.zotero/zotero/shcd70xr.default/zotero/storage/U7ER27KC/Manadhata et al. - 2006 - Measuring the Attack Surfaces of Two FTP Daemons.pdf:application/pdf}
}

@article{ongtang_semantically_2012,
	title = {Semantically rich application-centric security in Android},
	volume = {5},
	copyright = {Copyright © 2011 John Wiley \& Sons, Ltd.},
	issn = {1939-0122},
	url = {http://onlinelibrary.wiley.com/doi/10.1002/sec.360/abstract},
	doi = {10.1002/sec.360},
	abstract = {Smartphones are now ubiquitous. However, the security requirements of these relatively new systems and the applications they support are still being understood. As a result, the security infrastructure available in current smartphone operating systems is largely underdeveloped. In this paper, we consider the security requirements of smartphone applications and augment the existing Android operating system with a framework to meet them. We present Secure Application {INTeraction} (Saint), a modified infrastructure that governs install-time permission assignment and their run-time use as dictated by application provider policy. An in-depth description of the semantics of application policy is presented. The architecture and technical detail of Saint are given, and areas for extension, optimization, and improvement are explored. We demonstrate through a concrete example and study of real-world applications that Saint provides necessary utility for applications to assert and control the security decisions on the platform. Copyright © 2011 John Wiley \& Sons, Ltd.},
	language = {en},
	number = {6},
	urldate = {2014-11-24},
	journal = {Security and Communication Networks},
	author = {Ongtang, Machigar and McLaughlin, Stephen and Enck, William and McDaniel, Patrick},
	month = jun,
	year = {2012},
	keywords = {Android, security, smartphones},
	pages = {658--673},
	file = {Snapshot:/home/kevin/.zotero/zotero/shcd70xr.default/zotero/storage/M5EZSJVS/abstract.html:text/html}
}

@misc{_welcome_????,
	title = {Welcome to},
	url = {https://www.python.org/},
	abstract = {The official home of the Python Programming Language},
	urldate = {2014-11-24},
	journal = {Python.org},
	file = {Snapshot:/home/kevin/.zotero/zotero/shcd70xr.default/zotero/storage/B756A49E/www.python.org.html:text/html}
}

@article{shabtai_google_2010,
	title = {Google Android: A Comprehensive Security Assessment},
	volume = {8},
	issn = {1540-7993},
	shorttitle = {Google Android},
	url = {http://dx.doi.org/10.1109/MSP.2010.2},
	doi = {10.1109/MSP.2010.2},
	abstract = {The Android framework, Google's new software stack for mobile devices, includes an operating system, middleware, and key applications. This research provides a comprehensive security assessment of this framework and its security mechanisms The authors conducted a methodological qualitative risk analysis that identifies high-risk threats to the framework and any potential danger to information or to the system resulting from vulnerabilities attackers have uncovered and exploited. They propose several security solutions for mitigating these risks.},
	number = {2},
	urldate = {2014-11-24},
	journal = {{IEEE} Security and Privacy},
	author = {Shabtai, Asaf and Fledel, Yuval and Kanonov, Uri and Elovici, Yuval and Dolev, Shlomi and Glezer, Chanan},
	month = mar,
	year = {2010},
	keywords = {Android, Google, mobile devices, risk analysis, security, security solutions for mobile devices},
	pages = {35--44}
}

@article{manadhata_attack_2011,
	title = {An Attack Surface Metric},
	volume = {37},
	issn = {0098-5589},
	doi = {10.1109/TSE.2010.60},
	abstract = {Measurement of software security is a long-standing challenge to the research community. At the same time, practical security metrics and measurements are essential for secure software development. Hence, the need for metrics is more pressing now due to a growing demand for secure software. In this paper, we propose using a software system's attack surface measurement as an indicator of the system's security. We formalize the notion of a system's attack surface and introduce an attack surface metric to measure the attack surface in a systematic manner. Our measurement method is agnostic to a software system's implementation language and is applicable to systems of all sizes; we demonstrate our method by measuring the attack surfaces of small desktop applications and large enterprise systems implemented in C and Java. We conducted three exploratory empirical studies to validate our method. Software developers can mitigate their software's security risk by measuring and reducing their software's attack surfaces. Our attack surface reduction approach complements the software industry's traditional code quality improvement approach for security risk mitigation and is useful in multiple phases of the software development lifecycle. Our collaboration with {SAP} demonstrates the use of our metric in the software development process.},
	number = {3},
	journal = {{IEEE} Transactions on Software Engineering},
	author = {Manadhata, P.K. and Wing, J.M.},
	month = may,
	year = {2011},
	keywords = {Application software, attack surface metric, C language, Code design, implementation language, Java, Java language, life cycle, Pressing, product metrics, Programming, protection mechanisms, risk mitigation, security, security metrics, Size measurement, software development, Software measurement, software metrics, Software quality, software security, software security., Software systems, Time measurement},
	pages = {371--386},
	file = {IEEE Xplore Abstract Record:/home/kevin/.zotero/zotero/shcd70xr.default/zotero/storage/AIJNZ8KD/abs_all.html:text/html;IEEE Xplore Full Text PDF:/home/kevin/.zotero/zotero/shcd70xr.default/zotero/storage/FMTPKQ5V/Manadhata and Wing - 2011 - An Attack Surface Metric.pdf:application/pdf}
}

@inproceedings{bartel_automatically_2012,
	address = {New York, {NY}, {USA}},
	series = {{ASE} 2012},
	title = {Automatically Securing Permission-based Software by Reducing the Attack Surface: An Application to Android},
	isbn = {978-1-4503-1204-2},
	shorttitle = {Automatically Securing Permission-based Software by Reducing the Attack Surface},
	url = {http://doi.acm.org/10.1145/2351676.2351722},
	doi = {10.1145/2351676.2351722},
	abstract = {In the permission-based security model (used e.g. in Android and Blackberry), applications can be granted more permissions than they actually need, what we call a “permission gap”. Malware can leverage the unused permissions for achieving their malicious goals, for instance using code injection. In this paper, we present an approach to detecting permission gaps using static analysis. Using our tool on a dataset of Android applications, we found out that a non negligible part of applications suffers from permission gaps, i.e. does not use all the permissions they declare.},
	urldate = {2014-11-24},
	booktitle = {Proceedings of the 27th {IEEE}/{ACM} International Conference on Automated Software Engineering},
	publisher = {{ACM}},
	author = {Bartel, Alexandre and Klein, Jacques and Le Traon, Yves and Monperrus, Martin},
	year = {2012},
	keywords = {Android, call-graph, permission-based software, Permissions, security, Soot, static analysis},
	pages = {274--277},
	file = {ACM Full Text PDF:/home/kevin/.zotero/zotero/shcd70xr.default/zotero/storage/DGXRAP7U/Bartel et al. - 2012 - Automatically Securing Permission-based Software b.pdf:application/pdf}
}

@misc{_gousiosg/java-callgraph_????,
	title = {gousiosg/java-callgraph},
	url = {https://github.com/gousiosg/java-callgraph},
	abstract = {java-callgraph - Programs for producing static and dynamic (runtime) call graphs for Java programs},
	urldate = {2014-11-24},
	journal = {{GitHub}},
	file = {Snapshot:/home/kevin/.zotero/zotero/shcd70xr.default/zotero/storage/97JKJMPR/java-callgraph.html:text/html}
}

@incollection{manadhata_report:_2009,
	series = {Lecture Notes in Computer Science},
	title = {Report: Measuring the Attack Surfaces of Enterprise Software},
	copyright = {©2009 Springer Berlin Heidelberg},
	isbn = {978-3-642-00198-7, 978-3-642-00199-4},
	shorttitle = {Report},
	url = {http://link.springer.com/chapter/10.1007/978-3-642-00199-4_8},
	abstract = {Software vendors are increasingly concerned about mitigating the security risk of their software. Code quality improvement is a traditional approach to mitigate security risk; measuring and reducing the attack surface of software is a complementary approach. In this paper, we apply a method for measuring attack surfaces to enterprise software written in Java. We implement a tool as an Eclipse plugin to measure an {SAP} software system’s attack surface in an automated manner. We demonstrate the feasibility of our approach by measuring the attack surfaces of three versions of an {SAP} software system. We envision our measurement method and tool to be useful to software developers for improving software security and quality.},
	language = {en},
	number = {5429},
	urldate = {2014-11-24},
	booktitle = {Engineering Secure Software and Systems},
	publisher = {Springer Berlin Heidelberg},
	author = {Manadhata, Pratyusa K. and Karabulut, Yuecel and Wing, Jeannette M.},
	editor = {Massacci, Fabio and Jr, Samuel T. Redwine and Zannone, Nicola},
	month = jan,
	year = {2009},
	keywords = {Algorithm Analysis and Problem Complexity, Data Encryption, Management of Computing and Information Systems, Operating Systems, Software Engineering, Systems and Data Security},
	pages = {91--100},
	file = {Full Text PDF:/home/kevin/.zotero/zotero/shcd70xr.default/zotero/storage/R7CI2UGU/Manadhata et al. - 2009 - Report Measuring the Attack Surfaces of Enterpris.pdf:application/pdf;Snapshot:/home/kevin/.zotero/zotero/shcd70xr.default/zotero/storage/EQ3NNAWP/978-3-642-00199-4_8.html:text/html}
}

@inproceedings{vidas_all_2011,
	address = {Berkeley, {CA}, {USA}},
	series = {{WOOT}'11},
	title = {All Your Droid Are Belong to Us: A Survey of Current Android Attacks},
	shorttitle = {All Your Droid Are Belong to Us},
	url = {http://dl.acm.org/citation.cfm?id=2028052.2028062},
	abstract = {In the past few years, mobile devices (smartphones, {PDAs}) have seen both their computational power and their data connectivity rise to a level nearly equivalent to that available on small desktop computers, while becoming ubiquitous. On the downside, these mobile devices are now an extremely attractive target for large-scale security attacks. Mobile device middleware is thus experiencing an increased focus on attempts to mitigate potential security compromises. In particular, Android incorporates by design many well-known security features such as privilege separation. The Android security model also creates several new security sensitive concepts such as Android's application permission system and the unmoderated Android market. In this paper we look to Android as a specific instance of mobile computing. We first discuss the Android security model and some potential weaknesses of the model. We then provide a taxonomy of attacks to the platform demonstrated by real attacks that in the end guarantee privileged access to the device. Where possible, we also propose mitigations for the identified vulnerabilities.},
	urldate = {2014-11-24},
	booktitle = {Proceedings of the 5th {USENIX} Conference on Offensive Technologies},
	publisher = {{USENIX} Association},
	author = {Vidas, Timothy and Votipka, Daniel and Christin, Nicolas},
	year = {2011},
	pages = {10--10}
}

@article{burns2009mobile,
  title={Mobile application security on Android},
  author={Burns, Jesse},
  journal={Black Hat},
  volume={9},
  year={2009}
}

@inproceedings{enck2011study,
  title={A Study of Android Application Security.},
  author={Enck, William and Octeau, Damien and McDaniel, Patrick and Chaudhuri, Swarat},
  booktitle={USENIX security symposium},
  volume={2},
  pages={2},
  year={2011}
}

@inproceedings{bugiel2012towards,
  title={Towards Taming Privilege-Escalation Attacks on Android.},
  author={Bugiel, Sven and Davi, Lucas and Dmitrienko, Alexandra and Fischer, Thomas and Sadeghi, Ahmad-Reza and Shastry, Bhargava},
  booktitle={NDSS},
  year={2012}
}

@article{gommerstadt2012android,
  title={Android Application Security},
  author={Gommerstadt, Hannah and Long, Devon},
  year={2012}
}
